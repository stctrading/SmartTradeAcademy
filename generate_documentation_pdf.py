import os
import sys
from datetime import datetime
try:
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib.colors import HexColor, black, white
    from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY
    from reportlab.graphics.shapes import Drawing, Rect, String
    from reportlab.graphics import renderPDF
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False
    print("‚ö†Ô∏è ReportLab no est√° instalado. Instalando...")
    import subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", "reportlab"])
    # Re-importar despu√©s de instalar
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib.colors import HexColor, black, white
    from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY
    from reportlab.graphics.shapes import Drawing, Rect, String
    from reportlab.graphics import renderPDF
    REPORTLAB_AVAILABLE = True

def create_stc_documentation_pdf():
    """Genera la documentaci√≥n completa del Sistema STC Trading en PDF"""
    
    # Configuraci√≥n del documento
    doc = SimpleDocTemplate(
        "STC_Trading_Sistema_Completo.pdf",
        pagesize=A4,
        rightMargin=72,
        leftMargin=72,
        topMargin=72,
        bottomMargin=18
    )
    
    # Estilos
    styles = getSampleStyleSheet()
    
    # Estilos personalizados
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=HexColor('#0f172a'),
        fontName='Helvetica-Bold'
    )
    
    heading1_style = ParagraphStyle(
        'CustomHeading1',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=12,
        spaceBefore=20,
        textColor=HexColor('#2563eb'),
        fontName='Helvetica-Bold'
    )
    
    heading2_style = ParagraphStyle(
        'CustomHeading2',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=10,
        spaceBefore=15,
        textColor=HexColor('#0f172a'),
        fontName='Helvetica-Bold'
    )
    
    heading3_style = ParagraphStyle(
        'CustomHeading3',
        parent=styles['Heading3'],
        fontSize=12,
        spaceAfter=8,
        spaceBefore=12,
        textColor=HexColor('#374151'),
        fontName='Helvetica-Bold'
    )
    
    body_style = ParagraphStyle(
        'CustomBody',
        parent=styles['Normal'],
        fontSize=10,
        spaceAfter=6,
        alignment=TA_JUSTIFY,
        fontName='Helvetica'
    )
    
    code_style = ParagraphStyle(
        'CodeStyle',
        parent=styles['Normal'],
        fontSize=9,
        fontName='Courier',
        backColor=HexColor('#f3f4f6'),
        borderColor=HexColor('#e5e7eb'),
        borderWidth=1,
        leftIndent=20,
        rightIndent=20,
        spaceAfter=10
    )
    
    # Contenido del documento
    story = []
    
    # === PORTADA ===
    story.append(Spacer(1, 2*inch))
    story.append(Paragraph("üèõÔ∏è SISTEMA STC TRADING", title_style))
    story.append(Paragraph("Plataforma Profesional de Trading Automatizado", styles['Heading3']))
    story.append(Paragraph("IQ Option ‚Ä¢ Mercados OTC ‚Ä¢ Dashboard Web", styles['Normal']))
    story.append(Spacer(1, 1*inch))
    
    # Informaci√≥n del sistema
    info_data = [
        ["üìä Versi√≥n", "Dashboard Pro v1.0"],
        ["üóìÔ∏è Fecha", "30 Septiembre 2025"],
        ["üîß Arquitectura", "3 Capas (Frontend + API + Cliente)"],
        ["üåê Acceso Web", "http://localhost:5001"],
        ["‚ö° Trading", "OTC 24/7 - CALL/PUT Binario"],
        ["üìà Gr√°ficos", "TradingView Lightweight Charts"],
        ["üéØ Mercados", "EURUSD, GBPUSD, USDJPY, EURJPY OTC"]
    ]
    
    info_table = Table(info_data, colWidths=[2*inch, 3*inch])
    info_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,-1), HexColor('#f8fafc')),
        ('TEXTCOLOR', (0,0), (-1,-1), black),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (0,-1), 'Helvetica-Bold'),
        ('FONTNAME', (1,0), (1,-1), 'Helvetica'),
        ('FONTSIZE', (0,0), (-1,-1), 10),
        ('GRID', (0,0), (-1,-1), 1, HexColor('#e2e8f0')),
        ('VALIGN', (0,0), (-1,-1), 'MIDDLE'),
    ]))
    
    story.append(info_table)
    story.append(PageBreak())
    
    # === √çNDICE ===
    story.append(Paragraph("üìã √çNDICE", heading1_style))
    
    toc_data = [
        ["1.", "Arquitectura del Sistema", "3"],
        ["2.", "Flujo de Inicio y Arranque", "4"],
        ["3.", "Flujo de Credenciales", "5"],
        ["4.", "Flujo de Velas M5", "6"],
        ["5.", "Flujo de √ìrdenes de Trading", "7"],
        ["6.", "Diccionario de Archivos", "8"],
        ["7.", "Bondades del Sistema", "9"],
        ["8.", "Puertos y Servicios", "10"],
        ["9.", "Requerimientos del Sistema", "11"],
        ["10.", "Gu√≠a de Instalaci√≥n", "12"],
        ["11.", "Configuraci√≥n y Setup", "13"],
        ["12.", "Troubleshooting", "14"]
    ]
    
    toc_table = Table(toc_data, colWidths=[0.5*inch, 4*inch, 0.5*inch])
    toc_table.setStyle(TableStyle([
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (0,-1), 'Helvetica-Bold'),
        ('FONTSIZE', (0,0), (-1,-1), 10),
        ('BOTTOMPADDING', (0,0), (-1,-1), 6),
    ]))
    
    story.append(toc_table)
    story.append(PageBreak())
    
    # === 1. ARQUITECTURA DEL SISTEMA ===
    story.append(Paragraph("1. üèóÔ∏è ARQUITECTURA DEL SISTEMA", heading1_style))
    
    story.append(Paragraph("Componentes Principales", heading2_style))
    story.append(Paragraph("""
    El sistema STC Trading est√° construido con una arquitectura de 3 capas independientes que se comunican 
    a trav√©s de APIs REST y protocolos HTTP. Esta separaci√≥n garantiza escalabilidad, mantenibilidad y 
    robustez del sistema completo.
    """, body_style))
    
    arch_data = [
        ["Componente", "Puerto", "Tecnolog√≠a", "Funci√≥n Principal"],
        ["Dashboard Frontend", "5001", "Flask + HTML/JS", "Interface web de usuario"],
        ["API Backend", "5002", "Flask + Redis", "Gesti√≥n de datos y √≥rdenes"],
        ["Cliente IQ Option", "-", "Python + IQ API", "Conexi√≥n real con broker"],
    ]
    
    arch_table = Table(arch_data, colWidths=[1.8*inch, 0.8*inch, 1.5*inch, 2.2*inch])
    arch_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), HexColor('#2563eb')),
        ('TEXTCOLOR', (0,0), (-1,0), white),
        ('ALIGN', (0,0), (-1,-1), 'CENTER'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('FONTNAME', (0,1), (-1,-1), 'Helvetica'),
        ('FONTSIZE', (0,0), (-1,-1), 9),
        ('GRID', (0,0), (-1,-1), 1, HexColor('#e2e8f0')),
        ('VALIGN', (0,0), (-1,-1), 'MIDDLE'),
        ('ROWBACKGROUNDS', (0,1), (-1,-1), [HexColor('#f8fafc'), white]),
    ]))
    
    story.append(arch_table)
    story.append(Spacer(1, 20))
    
    story.append(Paragraph("Flujo de Comunicaci√≥n", heading3_style))
    story.append(Paragraph("""
    <b>Usuario</b> ‚Üí <b>Dashboard (5001)</b> ‚Üí <b>API (5002)</b> ‚Üí <b>Cliente IQ</b> ‚Üí <b>IQ Option Servers</b>
    """, code_style))
    
    # === 2. FLUJO DE INICIO Y ARRANQUE ===
    story.append(PageBreak())
    story.append(Paragraph("2. üöÄ FLUJO DE INICIO Y ARRANQUE", heading1_style))
    
    story.append(Paragraph("Secuencia de Arranque Obligatoria", heading2_style))
    story.append(Paragraph("""
    El sistema debe iniciarse en un orden espec√≠fico para garantizar que todos los componentes se conecten 
    correctamente y los servicios est√©n disponibles cuando se necesiten.
    """, body_style))
    
    startup_data = [
        ["Orden", "Archivo", "Puerto", "Funci√≥n", "Tiempo Espera"],
        ["1¬∫", "iq_routes_redis_patch.py", "5002", "API Backend + Redis Cache", "5 segundos"],
        ["2¬∫", "dashboard_server.py", "5001", "Servidor Web Dashboard", "4 segundos"],
        ["3¬∫", "iq_client.py", "-", "Cliente IQ Option", "5 segundos"],
    ]
    
    startup_table = Table(startup_data, colWidths=[0.6*inch, 2.2*inch, 0.8*inch, 2.2*inch, 1.2*inch])
    startup_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), HexColor('#10b981')),
        ('TEXTCOLOR', (0,0), (-1,0), white),
        ('ALIGN', (0,0), (-1,-1), 'CENTER'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('FONTSIZE', (0,0), (-1,-1), 9),
        ('GRID', (0,0), (-1,-1), 1, HexColor('#e2e8f0')),
        ('VALIGN', (0,0), (-1,-1), 'MIDDLE'),
    ]))
    
    story.append(startup_table)
    story.append(Spacer(1, 15))
    
    story.append(Paragraph("Script de Inicio Autom√°tico", heading3_style))
    story.append(Paragraph("""
    start_dashboard_pro.bat
    ‚îú‚îÄ‚îÄ Detiene procesos previos
    ‚îú‚îÄ‚îÄ Inicia API Backend (puerto 5002)
    ‚îú‚îÄ‚îÄ Inicia Dashboard Web (puerto 5001)
    ‚îú‚îÄ‚îÄ Inicia Cliente IQ Option
    ‚îî‚îÄ‚îÄ Verifica que todos los servicios est√©n activos
    """, code_style))
    
    # === 3. FLUJO DE CREDENCIALES ===
    story.append(PageBreak())
    story.append(Paragraph("3. üîê FLUJO DE CREDENCIALES", heading1_style))
    
    story.append(Paragraph("Ruta de Autenticaci√≥n", heading2_style))
    story.append(Paragraph("""
    Las credenciales de IQ Option viajan de forma segura a trav√©s de la arquitectura del sistema, 
    desde la interface web hasta la conexi√≥n real con los servidores de IQ Option.
    """, body_style))
    
    creds_data = [
        ["Etapa", "Componente", "Acci√≥n", "Datos Procesados"],
        ["1", "dashboard_pro.html", "Captura formulario", "Email + Password + Balance Type"],
        ["2", "dashboard_server.py", "Proxy HTTP POST", "Redirige a puerto 5002"],
        ["3", "iq_routes_redis_patch.py", "Procesa /api/iq/login", "Valida y encola credenciales"],
        ["4", "iq_client.py", "Conexi√≥n IQ Option", "Login real + cambio de balance"],
        ["5", "Respuesta", "Confirmaci√≥n", "Session ID + Estado conexi√≥n"],
    ]
    
    creds_table = Table(creds_data, colWidths=[0.6*inch, 2*inch, 1.8*inch, 2.6*inch])
    creds_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), HexColor('#f59e0b')),
        ('TEXTCOLOR', (0,0), (-1,0), white),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('FONTSIZE', (0,0), (-1,-1), 9),
        ('GRID', (0,0), (-1,-1), 1, HexColor('#e2e8f0')),
        ('VALIGN', (0,0), (-1,-1), 'MIDDLE'),
    ]))
    
    story.append(creds_table)
    story.append(Spacer(1, 15))
    
    story.append(Paragraph("Seguridad y Almacenamiento", heading3_style))
    story.append(Paragraph("""
    ‚Ä¢ <b>Almacenamiento:</b> Memoria Redis + localStorage del navegador<br/>
    ‚Ä¢ <b>Transmisi√≥n:</b> HTTP POST (local network)<br/>
    ‚Ä¢ <b>Validaci√≥n:</b> IQ Option servers via HTTPS<br/>
    ‚Ä¢ <b>Sesi√≥n:</b> Persistente hasta logout manual
    """, body_style))
    
    # === 4. FLUJO DE VELAS M5 ===
    story.append(PageBreak())
    story.append(Paragraph("4. üìà FLUJO DE VELAS M5", heading1_style))
    
    story.append(Paragraph("Origen y Destino de Datos de Velas", heading2_style))
    story.append(Paragraph("""
    Las velas de 5 minutos (M5) son la base del an√°lisis t√©cnico en el sistema. Estos datos viajan 
    desde los servidores de IQ Option hasta el dashboard web para visualizaci√≥n en tiempo real.
    """, body_style))
    
    candles_flow = """
    IQ Option API ‚Üí iq_client.py ‚Üí Memory Redis ‚Üí iq_routes_redis_patch.py ‚Üí dashboard_pro.html ‚Üí TradingView Charts
    """
    story.append(Paragraph(candles_flow, code_style))
    
    candles_data = [
        ["Etapa", "Componente", "Funci√≥n", "Datos"],
        ["Obtenci√≥n", "iq_client.py", "get_candles() cada 2s", "OHLCV + timestamp"],
        ["Cache", "MemoryRedis", "Almac√©n temporal", "√öltimas 200 velas"],
        ["API", "ruta /api/iq/candles", "GET endpoint", "JSON con velas filtradas"],
        ["Frontend", "ChartManager class", "Fetch autom√°tico", "Renderizado TradingView"],
        ["Visualizaci√≥n", "Lightweight Charts", "Gr√°fico interactivo", "Velas + l√≠nea BID"],
    ]
    
    candles_table = Table(candles_data, colWidths=[1.2*inch, 1.8*inch, 1.8*inch, 2.2*inch])
    candles_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), HexColor('#8b5cf6')),
        ('TEXTCOLOR', (0,0), (-1,0), white),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('FONTSIZE', (0,0), (-1,-1), 9),
        ('GRID', (0,0), (-1,-1), 1, HexColor('#e2e8f0')),
        ('VALIGN', (0,0), (-1,-1), 'MIDDLE'),
    ]))
    
    story.append(candles_table)
    story.append(Spacer(1, 15))
    
    story.append(Paragraph("Caracter√≠sticas de las Velas", heading3_style))
    story.append(Paragraph("""
    ‚Ä¢ <b>Timeframe:</b> M5 (5 minutos) - Optimizado para trading binario<br/>
    ‚Ä¢ <b>S√≠mbolos OTC:</b> EURUSD-OTC, GBPUSD-OTC, USDJPY-OTC, EURJPY-OTC<br/>
    ‚Ä¢ <b>Disponibilidad:</b> 24/7 (mercados OTC siempre abiertos)<br/>
    ‚Ä¢ <b>Actualizaci√≥n:</b> Cada 2 segundos con nuevos datos<br/>
    ‚Ä¢ <b>Hist√≥rico:</b> √öltimas 200 velas en memoria para an√°lisis
    """, body_style))
    
    # === 5. FLUJO DE √ìRDENES DE TRADING ===
    story.append(PageBreak())
    story.append(Paragraph("5. üí∏ FLUJO DE √ìRDENES DE TRADING", heading1_style))
    
    story.append(Paragraph("Env√≠o de Orden CALL/PUT", heading2_style))
    story.append(Paragraph("""
    El proceso de env√≠o de √≥rdenes es cr√≠tico para el trading. El sistema garantiza que cada orden 
    sea procesada de forma segura y eficiente desde el dashboard hasta IQ Option.
    """, body_style))
    
    order_flow = """
    Usuario (CALL/PUT) ‚Üí Dashboard ‚Üí API ‚Üí Cola Redis ‚Üí IQ Client ‚Üí IQ Option ‚Üí Confirmaci√≥n
    """
    story.append(Paragraph(order_flow, code_style))
    
    orders_data = [
        ["Paso", "Componente", "Acci√≥n", "Datos", "Tiempo"],
        ["1", "dashboard_pro.html", "Clic bot√≥n CALL/PUT", "Symbol + Amount + Duration", "Inmediato"],
        ["2", "JavaScript fetch()", "POST /api/iq/trade", "JSON con par√°metros orden", "< 100ms"],
        ["3", "dashboard_server.py", "Proxy a puerto 5002", "Forward request", "< 50ms"],
        ["4", "iq_routes_redis_patch.py", "Procesa y encola", "Orden en cola Redis", "< 200ms"],
        ["5", "iq_client.py", "Ejecuta en IQ Option", "api.buy() real", "1-3 segundos"],
        ["6", "Confirmaci√≥n", "Resultado al dashboard", "Order ID + Status", "< 500ms"],
    ]
    
    orders_table = Table(orders_data, colWidths=[0.5*inch, 1.6*inch, 1.4*inch, 1.8*inch, 1*inch])
    orders_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), HexColor('#ef4444')),
        ('TEXTCOLOR', (0,0), (-1,0), white),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('FONTSIZE', (0,0), (-1,-1), 8),
        ('GRID', (0,0), (-1,-1), 1, HexColor('#e2e8f0')),
        ('VALIGN', (0,0), (-1,-1), 'MIDDLE'),
    ]))
    
    story.append(orders_table)
    
    # === 6. DICCIONARIO DE ARCHIVOS ===
    story.append(PageBreak())
    story.append(Paragraph("6. üóÇÔ∏è DICCIONARIO DE ARCHIVOS Y FUNCIONES", heading1_style))
    
    story.append(Paragraph("Backend Core", heading2_style))
    
    backend_data = [
        ["Archivo", "Puerto", "L√≠neas", "Funci√≥n Principal", "Dependencias Clave"],
        ["iq_routes_redis_patch.py", "5002", "~400", "API REST + Cache Redis", "Flask, MemoryRedis"],
        ["dashboard_server.py", "5001", "~120", "Servidor web + Proxy", "Flask, requests"],
        ["iq_client.py", "-", "~450", "Cliente IQ Option", "iqoptionapi, httpx"],
    ]
    
    backend_table = Table(backend_data, colWidths=[2.2*inch, 0.8*inch, 0.8*inch, 1.8*inch, 1.4*inch])
    backend_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), HexColor('#0f172a')),
        ('TEXTCOLOR', (0,0), (-1,0), white),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('FONTSIZE', (0,0), (-1,-1), 9),
        ('GRID', (0,0), (-1,-1), 1, HexColor('#e2e8f0')),
        ('VALIGN', (0,0), (-1,-1), 'MIDDLE'),
    ]))
    
    story.append(backend_table)
    story.append(Spacer(1, 15))
    
    story.append(Paragraph("Frontend y Templates", heading2_style))
    
    frontend_data = [
        ["Archivo", "Tama√±o", "Funci√≥n", "Tecnolog√≠as"],
        ["dashboard_pro.html", "~1200 l√≠neas", "Interface moderna trading", "HTML5 + CSS3 + JavaScript ES6"],
        ["dashboard.html", "~1200 l√≠neas", "Interface original (backup)", "HTML5 + TradingView Charts"],
    ]
    
    frontend_table = Table(frontend_data, colWidths=[2*inch, 1.5*inch, 2*inch, 1.5*inch])
    frontend_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), HexColor('#059669')),
        ('TEXTCOLOR', (0,0), (-1,0), white),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('FONTSIZE', (0,0), (-1,-1), 9),
        ('GRID', (0,0), (-1,-1), 1, HexColor('#e2e8f0')),
    ]))
    
    story.append(frontend_table)
    story.append(Spacer(1, 15))
    
    story.append(Paragraph("Scripts de Automatizaci√≥n", heading2_style))
    
    scripts_data = [
        ["Script", "Funci√≥n", "Orden de Ejecuci√≥n"],
        ["start_dashboard_pro.bat", "Inicio sistema completo nuevo", "Recomendado principal"],
        ["start_system_final.bat", "Inicio sistema anterior", "Backup alternativo"],
        ["restart_fixed_system.bat", "Reinicio con correcciones", "Para troubleshooting"],
        ["test_trading_routes.bat", "Pruebas de endpoints API", "Para desarrollo"],
    ]
    
    scripts_table = Table(scripts_data, colWidths=[2.2*inch, 2.5*inch, 2.3*inch])
    scripts_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), HexColor('#7c3aed')),
        ('TEXTCOLOR', (0,0), (-1,0), white),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('FONTSIZE', (0,0), (-1,-1), 9),
        ('GRID', (0,0), (-1,-1), 1, HexColor('#e2e8f0')),
    ]))
    
    story.append(scripts_table)
    
    # === 7. BONDADES DEL SISTEMA ===
    story.append(PageBreak())
    story.append(Paragraph("7. üåü BONDADES Y VENTAJAS DEL SISTEMA", heading1_style))
    
    story.append(Paragraph("Arquitectura Modular", heading2_style))
    story.append(Paragraph("""
    ‚Ä¢ <b>Separaci√≥n de responsabilidades:</b> Frontend, API y Cliente independientes<br/>
    ‚Ä¢ <b>Escalabilidad:</b> Cada componente puede escalar individualmente<br/>
    ‚Ä¢ <b>Mantenibilidad:</b> Modificaciones aisladas sin afectar otros m√≥dulos<br/>
    ‚Ä¢ <b>Testabilidad:</b> Cada capa puede probarse por separado
    """, body_style))
    
    story.append(Paragraph("Trading 24/7 OTC", heading2_style))
    story.append(Paragraph("""
    ‚Ä¢ <b>Mercados OTC:</b> Disponibles las 24 horas, 7 d√≠as de la semana<br/>
    ‚Ä¢ <b>S√≠mbolos principales:</b> EURUSD-OTC, GBPUSD-OTC, USDJPY-OTC, EURJPY-OTC<br/>
    ‚Ä¢ <b>Sin restricciones horarias:</b> Opera en cualquier momento<br/>
    ‚Ä¢ <b>Latencia optimizada:</b> Cache en memoria para ejecuci√≥n r√°pida
    """, body_style))
    
    story.append(Paragraph("Interface Profesional", heading2_style))
    story.append(Paragraph("""
    ‚Ä¢ <b>Dashboard moderno:</b> Dise√±o elegante inspirado en plataformas profesionales<br/>
    ‚Ä¢ <b>Gr√°ficos TradingView:</b> Velas M5 interactivas con indicadores<br/>
    ‚Ä¢ <b>Trading integrado:</b> Botones CALL/PUT con un solo clic<br/>
    ‚Ä¢ <b>Estad√≠sticas en vivo:</b> Balance, operaciones y rendimiento actualizados<br/>
    ‚Ä¢ <b>Responsive design:</b> Compatible con desktop y m√≥vil
    """, body_style))
    
    story.append(Paragraph("Robustez y Confiabilidad", heading2_style))
    story.append(Paragraph("""
    ‚Ä¢ <b>Manejo inteligente de errores:</b> Reconexi√≥n autom√°tica y recuperaci√≥n<br/>
    ‚Ä¢ <b>Cache eficiente:</b> Datos persistentes en memoria para velocidad<br/>
    ‚Ä¢ <b>Fallbacks m√∫ltiples:</b> CDNs de respaldo para librer√≠as externas<br/>
    ‚Ä¢ <b>Logs detallados:</b> Sistema completo de debugging y monitoreo<br/>
    ‚Ä¢ <b>Validaciones:</b> Verificaci√≥n de datos en cada etapa
    """, body_style))
    
    # === 8. PUERTOS Y SERVICIOS ===
    story.append(PageBreak())
    story.append(Paragraph("8. üì° PUERTOS Y SERVICIOS", heading1_style))
    
    story.append(Paragraph("Mapa de Conectividad", heading2_style))
    
    connectivity_map = """
    Internet (IQ Option API) ‚Üê HTTPS ‚Üí iq_client.py
                                           ‚Üì Redis Queue
    localhost:5001 (Dashboard) ‚Üê HTTP ‚Üí localhost:5002 (API Backend)
                   ‚Üì Navegador Web              ‚Üì REST Endpoints
               Usuario Final                   Cache + √ìrdenes
    """
    story.append(Paragraph(connectivity_map, code_style))
    
    ports_data = [
        ["Puerto", "Servicio", "Protocolo", "Funci√≥n", "Acceso"],
        ["5001", "Dashboard Web", "HTTP", "Interface usuario", "http://localhost:5001"],
        ["5002", "API Backend", "HTTP", "REST API + Cache", "http://localhost:5002"],
        ["-", "Cliente IQ", "HTTPS", "Conexi√≥n externa", "Proceso background"],
        ["443", "IQ Option", "HTTPS", "Broker real", "Internet (external)"],
    ]
    
    ports_table = Table(ports_data, colWidths=[0.8*inch, 1.5*inch, 1*inch, 1.8*inch, 1.9*inch])
    ports_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), HexColor('#dc2626')),
        ('TEXTCOLOR', (0,0), (-1,0), white),
        ('ALIGN', (0,0), (-1,-1), 'CENTER'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('FONTSIZE', (0,0), (-1,-1), 9),
        ('GRID', (0,0), (-1,-1), 1, HexColor('#e2e8f0')),
        ('VALIGN', (0,0), (-1,-1), 'MIDDLE'),
    ]))
    
    story.append(ports_table)
    story.append(Spacer(1, 15))
    
    story.append(Paragraph("URLs Principales del Sistema", heading2_style))
    
    urls_data = [
        ["Endpoint", "M√©todo", "Funci√≥n", "Respuesta"],
        ["/", "GET", "Dashboard principal", "HTML interface"],
        ["/health", "GET", "Estado del sistema", "JSON status"],
        ["/api/iq/balance", "GET", "Saldo actual", "JSON balance"],
        ["/api/iq/candles", "GET", "Velas M5", "JSON array"],
        ["/api/iq/trade", "POST", "Enviar orden", "JSON result"],
        ["/api/iq/login", "POST", "Autenticaci√≥n", "JSON session"],
    ]
    
    urls_table = Table(urls_data, colWidths=[1.8*inch, 0.8*inch, 1.8*inch, 1.6*inch])
    urls_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), HexColor('#1f2937')),
        ('TEXTCOLOR', (0,0), (-1,0), white),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('FONTSIZE', (0,0), (-1,-1), 9),
        ('GRID', (0,0), (-1,-1), 1, HexColor('#e2e8f0')),
    ]))
    
    story.append(urls_table)
    
    # === 9. REQUERIMIENTOS DEL SISTEMA ===
    story.append(PageBreak())
    story.append(Paragraph("9. üíª REQUERIMIENTOS DEL SISTEMA", heading1_style))
    
    story.append(Paragraph("Sistema Operativo", heading2_style))
    
    os_data = [
        ["OS", "Versi√≥n M√≠nima", "Recomendado", "Notas"],
        ["Windows", "Windows 10", "Windows 11", "Tested y optimizado"],
        ["Linux", "Ubuntu 18.04+", "Ubuntu 22.04", "Compatible"],
        ["macOS", "macOS 10.14+", "macOS 12+", "Compatible"],
    ]
    
    os_table = Table(os_data, colWidths=[1.5*inch, 1.5*inch, 1.5*inch, 2.5*inch])
    os_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), HexColor('#0891b2')),
        ('TEXTCOLOR', (0,0), (-1,0), white),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('FONTSIZE', (0,0), (-1,-1), 9),
        ('GRID', (0,0), (-1,-1), 1, HexColor('#e2e8f0')),
    ]))
    
    story.append(os_table)
    story.append(Spacer(1, 15))
    
    story.append(Paragraph("Hardware", heading2_style))
    
    hw_data = [
        ["Componente", "M√≠nimo", "Recomendado", "Observaciones"],
        ["CPU", "Dual Core 2.0 GHz", "Quad Core 3.0 GHz", "Para m√∫ltiples procesos"],
        ["RAM", "4 GB", "8 GB", "Python + Flask + Chrome"],
        ["Disco", "2 GB libres", "5 GB libres", "Logs y cache"],
        ["Red", "Banda ancha", "Fibra √≥ptica", "Latencia cr√≠tica trading"],
    ]
    
    hw_table = Table(hw_data, colWidths=[1.5*inch, 1.5*inch, 1.5*inch, 2.5*inch])
    hw_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), HexColor('#7c2d12')),
        ('TEXTCOLOR', (0,0), (-1,0), white),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('FONTSIZE', (0,0), (-1,-1), 9),
        ('GRID', (0,0), (-1,-1), 1, HexColor('#e2e8f0')),
    ]))
    
    story.append(hw_table)
    story.append(Spacer(1, 15))
    
    story.append(Paragraph("Software Base", heading2_style))
    
    sw_data = [
        ["Software", "Versi√≥n", "Prop√≥sito", "Instalaci√≥n"],
        ["Python", "3.9+", "Runtime principal", "python.org"],
        ["Navegador Web", "Chrome 90+", "Interface dashboard", "Pre-instalado"],
        ["Terminal/CMD", "Nativo", "Ejecutar scripts", "Sistema"],
    ]
    
    sw_table = Table(sw_data, colWidths=[1.5*inch, 1.2*inch, 2*inch, 2.3*inch])
    sw_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), HexColor('#15803d')),
        ('TEXTCOLOR', (0,0), (-1,0), white),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('FONTSIZE', (0,0), (-1,-1), 9),
        ('GRID', (0,0), (-1,-1), 1, HexColor('#e2e8f0')),
    ]))
    
    story.append(sw_table)
    
    # === 10. GU√çA DE INSTALACI√ìN ===
    story.append(PageBreak())
    story.append(Paragraph("10. üîß GU√çA DE INSTALACI√ìN", heading1_style))
    
    story.append(Paragraph("Paso 1: Instalaci√≥n de Python", heading2_style))
    story.append(Paragraph("""
    1. Descargar Python 3.9+ desde <b>python.org</b><br/>
    2. Ejecutar instalador y marcar "Add to PATH"<br/>
    3. Verificar: abrir CMD y escribir <b>python --version</b><br/>
    4. Debe mostrar: Python 3.9.x o superior
    """, body_style))
    
    story.append(Paragraph("Paso 2: Descargar Sistema STC", heading2_style))
    story.append(Paragraph("""
    1. Extraer archivos en <b>C:\\STC_Trading_System</b><br/>
    2. Abrir CMD como Administrador<br/>
    3. Navegar: <b>cd C:\\STC_Trading_System</b><br/>
    4. Verificar archivos: <b>dir</b> (debe mostrar iq_client.py, etc.)
    """, body_style))
    
    story.append(Paragraph("Paso 3: Crear Entorno Virtual", heading2_style))
    install_commands = """
cd C:\\STC_Trading_System
python -m venv .venv311
.venv311\\Scripts\\activate
python -m pip install --upgrade pip
pip install -r requirements.txt
    """
    story.append(Paragraph(install_commands, code_style))
    
    story.append(Paragraph("Paso 4: Configurar Variables", heading2_style))
    story.append(Paragraph("""
    1. Abrir archivo <b>.env</b> con Notepad<br/>
    2. Configurar s√≠mbolos OTC (ya preconfigurado)<br/>
    3. Ajustar timeouts si es necesario<br/>
    4. Guardar cambios
    """, body_style))
    
    story.append(Paragraph("Paso 5: Primer Arranque", heading2_style))
    startup_commands = """
cd C:\\STC_Trading_System
start_dashboard_pro.bat
    """
    story.append(Paragraph(startup_commands, code_style))
    
    story.append(Paragraph("Verificaci√≥n de Instalaci√≥n", heading3_style))
    story.append(Paragraph("""
    ‚úÖ Abrir navegador en <b>http://localhost:5001</b><br/>
    ‚úÖ Ver dashboard con interface moderna<br/>
    ‚úÖ Verificar que muestra "Sistema iniciando..."<br/>
    ‚úÖ No debe haber errores en ventanas de CMD
    """, body_style))
    
    # === 11. CONFIGURACI√ìN Y SETUP ===
    story.append(PageBreak())
    story.append(Paragraph("11. ‚öôÔ∏è CONFIGURACI√ìN Y SETUP", heading1_style))
    
    story.append(Paragraph("Paquetes Python Requeridos", heading2_style))
    
    packages_data = [
        ["Paquete", "Versi√≥n", "Prop√≥sito", "Cr√≠tico"],
        ["Flask", "2.3.x", "Servidor web framework", "S√≠"],
        ["iqoptionapi", "6.8.9.1", "Conexi√≥n IQ Option", "S√≠"],
        ["requests", "2.31.x", "HTTP client", "S√≠"],
        ["httpx", "0.24.x", "Async HTTP client", "S√≠"],
        ["python-dotenv", "1.0.x", "Variables entorno", "S√≠"],
        ["reportlab", "4.0.x", "Generaci√≥n PDF", "No"],
    ]
    
    packages_table = Table(packages_data, colWidths=[1.8*inch, 1*inch, 2*inch, 1.2*inch])
    packages_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), HexColor('#b91c1c')),
        ('TEXTCOLOR', (0,0), (-1,0), white),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('FONTSIZE', (0,0), (-1,-1), 9),
        ('GRID', (0,0), (-1,-1), 1, HexColor('#e2e8f0')),
        ('VALIGN', (0,0), (-1,-1), 'MIDDLE'),
    ]))
    
    story.append(packages_table)
    story.append(Spacer(1, 15))
    
    story.append(Paragraph("Archivo requirements.txt", heading3_style))
    requirements_content = """
Flask==2.3.3
iqoptionapi==6.8.9.1
requests==2.31.0
httpx==0.24.1
python-dotenv==1.0.0
reportlab==4.0.4
    """
    story.append(Paragraph(requirements_content, code_style))
    
    story.append(Paragraph("Variables de Entorno (.env)", heading2_style))
    
    env_data = [
        ["Variable", "Valor Por Defecto", "Descripci√≥n"],
        ["IQ_SYMBOLS", "EURUSD-OTC,GBPUSD-OTC,...", "S√≠mbolos para trading"],
        ["MAX_BUFFER_SIZE", "2000", "Tama√±o cache velas"],
        ["FRONTEND_CLOSED_LIMIT", "300", "L√≠mite velas dashboard"],
        ["ACTIVE_SOURCE", "iq", "Fuente de datos principal"],
    ]
    
    env_table = Table(env_data, colWidths=[2*inch, 2.2*inch, 2.8*inch])
    env_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), HexColor('#059669')),
        ('TEXTCOLOR', (0,0), (-1,0), white),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('FONTSIZE', (0,0), (-1,-1), 9),
        ('GRID', (0,0), (-1,-1), 1, HexColor('#e2e8f0')),
    ]))
    
    story.append(env_table)
    story.append(Spacer(1, 15))
    
    story.append(Paragraph("Configuraci√≥n de Red", heading2_style))
    story.append(Paragraph("""
    ‚Ä¢ <b>Puertos locales:</b> 5001 y 5002 deben estar libres<br/>
    ‚Ä¢ <b>Firewall:</b> Permitir conexiones locales Python<br/>
    ‚Ä¢ <b>Antivirus:</b> Excluir carpeta STC_Trading_System<br/>
    ‚Ä¢ <b>Internet:</b> Conexi√≥n estable para IQ Option API
    """, body_style))
    
    # === 12. TROUBLESHOOTING ===
    story.append(PageBreak())
    story.append(Paragraph("12. üîç TROUBLESHOOTING Y SOLUCI√ìN DE PROBLEMAS", heading1_style))
    
    story.append(Paragraph("Problemas Comunes", heading2_style))
    
    troubleshooting_data = [
        ["Problema", "Causa", "Soluci√≥n"],
        ["Puerto ocupado", "Otro proceso usa 5001/5002", "taskkill /f /im python.exe"],
        ["Gr√°ficos no cargan", "LightweightCharts no disponible", "Refrescar navegador (Ctrl+F5)"],
        ["IQ no conecta", "Credenciales incorrectas", "Verificar email/password"],
        ["Velas no actualizan", "Cliente IQ desconectado", "Reiniciar iq_client.py"],
        ["√ìrdenes fallan", "Mercado cerrado", "Usar s√≠mbolos OTC √∫nicamente"],
        ["Dashboard no abre", "Servidor no iniciado", "Ejecutar start_dashboard_pro.bat"],
    ]
    
    troubleshooting_table = Table(troubleshooting_data, colWidths=[2.2*inch, 2.2*inch, 2.6*inch])
    troubleshooting_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), HexColor('#dc2626')),
        ('TEXTCOLOR', (0,0), (-1,0), white),
        ('ALIGN', (0,0), (-1,-1), 'LEFT'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('FONTSIZE', (0,0), (-1,-1), 8),
        ('GRID', (0,0), (-1,-1), 1, HexColor('#e2e8f0')),
        ('VALIGN', (0,0), (-1,-1), 'TOP'),
    ]))
    
    story.append(troubleshooting_table)
    story.append(Spacer(1, 15))
    
    story.append(Paragraph("Comandos de Diagn√≥stico", heading2_style))
    diagnostic_commands = """
# Verificar Python instalado
python --version

# Verificar puertos ocupados
netstat -an | findstr "5001\\|5002"

# Verificar procesos Python
tasklist | findstr python

# Probar conectividad API
curl http://localhost:5002/health

# Probar dashboard
curl http://localhost:5001/health

# Reinicio completo sistema
cd C:\\STC_Trading_System
start_dashboard_pro.bat
    """
    story.append(Paragraph(diagnostic_commands, code_style))
    
    story.append(Paragraph("Logs y Debugging", heading2_style))
    story.append(Paragraph("""
    ‚Ä¢ <b>Logs del sistema:</b> Se muestran en ventanas CMD abiertas<br/>
    ‚Ä¢ <b>Logs del navegador:</b> F12 ‚Üí Console para errores JavaScript<br/>
    ‚Ä¢ <b>Archivos de log:</b> Carpeta logs/ (se crean autom√°ticamente)<br/>
    ‚Ä¢ <b>Nivel de detalle:</b> INFO por defecto, cambiar a DEBUG si necesario
    """, body_style))
    
    story.append(Paragraph("Contacto y Soporte", heading2_style))
    story.append(Paragraph("""
    ‚Ä¢ <b>Documentaci√≥n:</b> Archivos README.md en el proyecto<br/>
    ‚Ä¢ <b>Logs detallados:</b> Activar DEBUG en archivos Python<br/>
    ‚Ä¢ <b>Backup dashboard:</b> http://localhost:5001/dashboard_old<br/>
    ‚Ä¢ <b>Reset completo:</b> Eliminar .venv311 y reinstalar
    """, body_style))
    
    # === PIE DE P√ÅGINA ===
    story.append(Spacer(1, 0.5*inch))
    story.append(Paragraph("‚îÄ" * 80, styles['Normal']))
    story.append(Paragraph(f"""
    <b>Sistema STC Trading - Documentaci√≥n Completa</b><br/>
    Generado el: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}<br/>
    Versi√≥n: Dashboard Pro v1.0<br/>
    Plataforma: Windows / Linux / macOS Compatible
    """, styles['Normal']))
    
    # Generar PDF
    print("üìÑ Generando documentaci√≥n PDF...")
    doc.build(story)
    print("‚úÖ PDF generado: STC_Trading_Sistema_Completo.pdf")
    return "STC_Trading_Sistema_Completo.pdf"

if __name__ == "__main__":
    try:
        pdf_file = create_stc_documentation_pdf()
        print(f"üéâ Documentaci√≥n completa generada en: {pdf_file}")
        print("üìñ El archivo PDF contiene:")
        print("   ‚Ä¢ Arquitectura del sistema")
        print("   ‚Ä¢ Flujos de datos completos")
        print("   ‚Ä¢ Diccionario de archivos")
        print("   ‚Ä¢ Gu√≠a de instalaci√≥n")
        print("   ‚Ä¢ Requerimientos de sistema")
        print("   ‚Ä¢ Troubleshooting")
    except Exception as e:
        print(f"‚ùå Error generando PDF: {e}")
        print("üí° Instalar ReportLab: pip install reportlab")
